"""The main user interface for the user to interact with and modify their plots"""
from typing import List
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.axes import Axes
from .. import artists as art
from ..utils.utils import iterate_blocks, DrawnSecStructElement


class SecStructArtist:
    """Class to draw secondary structure representations

    All secondary structure representations are typically drawn in an existing
    maplotlib axis.

    Attributes:
    -----------
        height : float
            Height of the secondary structure elements to be drawn in y-axis 
            scale (default: 1.)
        linewidth : float
            Linewidth of the secondary structure elements to be drawn (default: 1.)
        zorder : float
            Corresponds to the zorder argument of matplotlib. Elements are draw
            in the range [zorder-.5, zorder] to handle internal overlays. 
            (default: 10.)
        artists : dict
            Dictionary where the keys correspond to secondary structure codes,
            and the values are the artists used to visualize the corresponding
            secondary structure. This is fully customizable with artists from 
            the `.artists` submodule. By default the following artists are 
            initialized:
                "H" -> HelixArtist
                "L" -> LoopArtist
                "S" -> SheetArtist

    Methods:
    --------
        draw(secstruct, xpos, ypos, ax) -> (Figure, List[DrawnSecStructElement])
            Draws the secondary structure given by secstruct, and returns a 
            list of all the objects drawn.
    """
    
    def __init__(self, height=1., linewidth=1., zorder=10,  helix_kwargs=None, 
                    loop_kwargs=None, sheet_kwargs=None):
        self.height = height
        self.linewidth = linewidth
        self.zorder = zorder
        self._artists = {}
        self["H"] = art.HelixArtist(**(helix_kwargs or {}))
        self["S"] = art.SheetArtist(**(sheet_kwargs or {}))
        self["L"] = art.LoopArtist(**(loop_kwargs or {}))
    
    def __getitem__(self, sscode) -> art.ElementArtist:
        try:
            return self._artists[sscode]
        except KeyError:
            return art.BlankArtist()

    def __setitem__(self, sscode, new_artist: art.ElementArtist) -> None:
        if not isinstance(new_artist, art.ElementArtist):
            raise TypeError(f"Cannot assign {new_artist.__class__.__name__} object as secondary structure artist.")
        new_artist.owner = self
        self._artists[sscode] = new_artist
    
    def __delitem__(self, sscode):
        del self._artists[sscode]

    def draw(self, secstruct: str or list, xpos=None, ypos: float = 0., ax: Axes = None) -> List[DrawnSecStructElement]:
        """This method draws a given secondary structure
        
        Parameters:
        -----------
            secstruct : str or array[N]
                Residue-wise secondary structure lables to be drawn. Every label
                should be present in the self.artists dictionary.
            xpos : array[N]
                The positions of each residue in secstruct on the x-axis. This
                is assumed to be in strictly ascending order.
            ypos : float
                Position of the secondary structure scheme on the y-axis. `ypos`
                corresponds to the center of the secondary structure scheme.
            ax : from matplotlib.axes import Axes
                The subplot where the secondary structure scheme should be drawn
                into (e.g., generated by `matplotlib.pyplot.subplots`).

        Returns:
        --------
            fig : matplotlib.figure.Figure
                The figure into which the scheme was drawn.
            drawn_elements : List[DrawnSecStructElement]
                A list of the elements drawn in the secondary structure scheme
        """
        if xpos is None:
            xpos = np.arange(len(secstruct))
            widths = np.ones(xpos.shape)
        else:
            assert len(xpos) == len(secstruct), "`xpos` and `secstruct` must be of same length"
            xpos = np.array(xpos)
            widths = np.diff(xpos)
            widths = np.pad(widths, (0,1), 'constant', constant_values=np.min(widths))

        if ax is None:
            fig, ax = plt.subplots(figsize=(.1*len(secstruct),.5))
            ax.set_ylim([ypos - .7 * self.height, ypos + .7 * self.height])

        drawn_elements = []
        for ss,ssx,ssw in iterate_blocks(secstruct, xpos, widths):
            dsse = self[ss].draw(ssx, ypos, ssw, ax)
            drawn_elements.append(dsse)
        
        return ax.get_figure(), drawn_elements